// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProductServices.Context;

namespace ProductServices.Context.Migrations
{
    [DbContext(typeof(ProductContext))]
    [Migration("20220104215159_createTableProductModelColorPrice")]
    partial class createTableProductModelColorPrice
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ProductServices.Models.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("HexColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("colors");
                });

            modelBuilder.Entity("ProductServices.Models.Marks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdProductType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdProductType");

                    b.ToTable("marks");
                });

            modelBuilder.Entity("ProductServices.Models.ModelColorPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdColor")
                        .HasColumnType("int");

                    b.Property<int>("IdModel")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("IdColor");

                    b.HasIndex("IdModel");

                    b.ToTable("modelColorPrice");
                });

            modelBuilder.Entity("ProductServices.Models.Models", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdMark")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdMark");

                    b.ToTable("models");
                });

            modelBuilder.Entity("ProductServices.Models.ProductModelColorPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdModelColorPrice")
                        .HasColumnType("int");

                    b.Property<int>("IdProducts")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdModelColorPrice");

                    b.HasIndex("IdProducts");

                    b.ToTable("productModelColorPrice");
                });

            modelBuilder.Entity("ProductServices.Models.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("productTypes");
                });

            modelBuilder.Entity("ProductServices.Models.Products", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateManufacture")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdModel")
                        .HasColumnType("int");

                    b.Property<int>("IdProductType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdModel");

                    b.HasIndex("IdProductType");

                    b.ToTable("products");
                });

            modelBuilder.Entity("ProductServices.Models.Marks", b =>
                {
                    b.HasOne("ProductServices.Models.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("IdProductType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("ProductServices.Models.ModelColorPrice", b =>
                {
                    b.HasOne("ProductServices.Models.Color", "color")
                        .WithMany("productColors")
                        .HasForeignKey("IdColor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductServices.Models.Models", "model")
                        .WithMany("modelColorPrice")
                        .HasForeignKey("IdModel")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("color");

                    b.Navigation("model");
                });

            modelBuilder.Entity("ProductServices.Models.Models", b =>
                {
                    b.HasOne("ProductServices.Models.Marks", "Mark")
                        .WithMany()
                        .HasForeignKey("IdMark")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mark");
                });

            modelBuilder.Entity("ProductServices.Models.ProductModelColorPrice", b =>
                {
                    b.HasOne("ProductServices.Models.ModelColorPrice", "ModelColorPrice")
                        .WithMany()
                        .HasForeignKey("IdModelColorPrice")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductServices.Models.Products", "Products")
                        .WithMany()
                        .HasForeignKey("IdProducts")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ModelColorPrice");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("ProductServices.Models.Products", b =>
                {
                    b.HasOne("ProductServices.Models.Models", "model")
                        .WithMany()
                        .HasForeignKey("IdModel")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductServices.Models.ProductType", "productType")
                        .WithMany()
                        .HasForeignKey("IdProductType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("model");

                    b.Navigation("productType");
                });

            modelBuilder.Entity("ProductServices.Models.Color", b =>
                {
                    b.Navigation("productColors");
                });

            modelBuilder.Entity("ProductServices.Models.Models", b =>
                {
                    b.Navigation("modelColorPrice");
                });
#pragma warning restore 612, 618
        }
    }
}
